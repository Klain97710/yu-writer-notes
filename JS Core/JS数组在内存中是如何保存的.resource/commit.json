{"compress":true,"commitItems":[["5d092dfa-a9a8-43bb-8a7f-ff90da50fac1",1584944518273,"",[[1584944465340,["Administrator@WIN-T3FPCJLTUH1",[[1,0,"# Javascript中的数组在内存中是如何保存的？"]],[0,0],[27,27]]],[1584944467413,["Administrator@WIN-T3FPCJLTUH1",[[1,27,"\n\n"]],[27,27],[28,28]]],[1584944467831,["Administrator@WIN-T3FPCJLTUH1",[[1,29,"\n"]],[28,28],[29,29]]],[1584944480285,["Administrator@WIN-T3FPCJLTUH1",[[1,29,"大家在日常编码中，最长碰到的是数组和对象的操作，各种增删改查，但是你真的了解数组和对象么？数组的最基本概念就不解释了，详情看MDN文档——[数组](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)\n今天我们主要讲一下数组的内存模型。\n\n# 数组的内存模型\n\nJavascript的内存分为堆内存和栈内存，数组作为对象，在建立后存储在堆内存中。\n任何计算机语言内存的分配都要经历三个阶段\n\n* * *\n\n*   **分配内存**\n*   **对内存进行读、写**\n*   **释放内存（垃圾回收）**\n\n* * *\n\n本文主要针对数组的内存分配进行解释。\nJavascript中数组有几个不同于其他语言数组的特点\n\n* * *\n\n*   **数组中可以存放不同的数据结构**，可以存放数组、对象、Number、Undefined、Null、String、Symbol、Boolean、Function等等。\n*   **数组的index是字符串类型的**，之所以你可以通过arr[1]，获得对应的数据，是因为Javascript自动将数字转化为字符串。\n\n* * *\n\n数组本来应该是一个**连续的内存分配**，但是在Javascript中不是连续分配的，而是类似**哈希映射**的方式存在的。\n对于上述的实现方式，熟悉数据结构的同学应该知道，**对于读取操作，哈希表的效率并不高，而修改删除的效率比较高**。\n现在浏览器为了优化其操作，对数组的创建时候的内存分配进行了优化：\n\n* * *\n\n*   对于同构的数组，也就是，数组中元素类型一致，会创建连续的内存分配\n*   对于不同构数组，按照原来的方式创建。\n*   如果你想插入一个异构数据，那么就会重新解构，通过哈希映射的方式创建\n\n* * *\n\n为了进一步优化功能的实现，Javascript中出现了[ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays)，它可以创建连续的内存供编程人员使用。\n\n* * *\n\n*   ArrayBuffer是创建一块连续的内存，不能直接操作\n*   通过视图对分配的内存进行读写操作\n\n* * *\n\n显而易见，如果通过ArrayBuffer创建的数组进行遍历操作，速度更快。\n参考文章：\n[数组深度解析](http://voidcanvas.com/javascript-array-evolution-performance/)"]],[29,29],[1159,1159]]]],null,"Administrator@WIN-T3FPCJLTUH1"],["4fa4954d-cf06-42d0-8341-df693d766fed",1596006285856,"# Javascript中的数组在内存中是如何保存的？\n\n大家在日常编码中，最长碰到的是数组和对象的操作，各种增删改查，但是你真的了解数组和对象么？数组的最基本概念就不解释了，详情看MDN文档——[数组](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array)\n今天我们主要讲一下数组的内存模型。\n\n# 数组的内存模型\n\nJavascript的内存分为堆内存和栈内存，数组作为对象，在建立后存储在堆内存中。\n任何计算机语言内存的分配都要经历三个阶段\n\n* * *\n\n*   **分配内存**\n*   **对内存进行读、写**\n*   **释放内存（垃圾回收）**\n\n* * *\n\n本文主要针对数组的内存分配进行解释。\nJavascript中数组有几个不同于其他语言数组的特点\n\n* * *\n\n*   **数组中可以存放不同的数据结构**，可以存放数组、对象、Number、Undefined、Null、String、Symbol、Boolean、Function等等。\n*   **数组的index是字符串类型的**，之所以你可以通过arr[1]，获得对应的数据，是因为Javascript自动将数字转化为字符串。\n\n* * *\n\n数组本来应该是一个**连续的内存分配**，但是在Javascript中不是连续分配的，而是类似**哈希映射**的方式存在的。\n对于上述的实现方式，熟悉数据结构的同学应该知道，**对于读取操作，哈希表的效率并不高，而修改删除的效率比较高**。\n现在浏览器为了优化其操作，对数组的创建时候的内存分配进行了优化：\n\n* * *\n\n*   对于同构的数组，也就是，数组中元素类型一致，会创建连续的内存分配\n*   对于不同构数组，按照原来的方式创建。\n*   如果你想插入一个异构数据，那么就会重新解构，通过哈希映射的方式创建\n\n* * *\n\n为了进一步优化功能的实现，Javascript中出现了[ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays)，它可以创建连续的内存供编程人员使用。\n\n* * *\n\n*   ArrayBuffer是创建一块连续的内存，不能直接操作\n*   通过视图对分配的内存进行读写操作\n\n* * *\n\n显而易见，如果通过ArrayBuffer创建的数组进行遍历操作，速度更快。\n参考文章：\n[数组深度解析](http://voidcanvas.com/javascript-array-evolution-performance/)\n",[[1596006232701,["Administrator@WIN-T3FPCJLTUH1",[[1,0,"\n"]],[0,0],[1,1]]],[1596006232895,["Administrator@WIN-T3FPCJLTUH1",[[1,0,"\n"]],[1,1],[2,2]]],[1596006234735,["Administrator@WIN-T3FPCJLTUH1",[[1,0,"# "]],[0,0],[2,2]]],[1596006443948,["Administrator@WIN-T3FPCJLTUH1",[[-1,0,"# \n\n"]],[0,4],[0,0]]],[1596006453122,["Administrator@WIN-T3FPCJLTUH1",[[1,0,"\n"]],[0,0],[1,1]]],[1596006455490,["Administrator@WIN-T3FPCJLTUH1",[[1,0,"#"]],[0,0],[1,1]]],[1596006455961,["Administrator@WIN-T3FPCJLTUH1",[[1,2,"\n"]],[1,1],[2,2]]],[1596006460904,["Administrator@WIN-T3FPCJLTUH1",[[1,1," 数组"]],[1,1],[4,4]]],[1596006474776,["Administrator@WIN-T3FPCJLTUH1",[[1,4,"方法分析泣别"]],[4,4],[10,10]]],[1596006475623,["Administrator@WIN-T3FPCJLTUH1",[[-1,8,"泣别"]],[10,10],[8,8]]],[1596006477286,["Administrator@WIN-T3FPCJLTUH1",[[1,10,"\n"]],[8,8],[9,9]]],[1596006477861,["Administrator@WIN-T3FPCJLTUH1",[[1,11,"\n"]],[9,9],[10,10]]],[1596006479474,["Administrator@WIN-T3FPCJLTUH1",[[1,10,"## "]],[10,10],[13,13]]],[1596006483898,["Administrator@WIN-T3FPCJLTUH1",[[-1,6,"分析"]],[8,8],[6,6]]],[1596006495014,["Administrator@WIN-T3FPCJLTUH1",[[1,6,"概兮"]],[6,6],[8,8]]],[1596006743081,["Administrator@WIN-T3FPCJLTUH1",[[1,0,"---\nnote: |-\n  1.JS数组在内存中是如何保存的\n  2.JS一些方法分析\n---\n"]],[13,13],[62,62]]],[1596006788925,["Administrator@WIN-T3FPCJLTUH1",[[-1,59,"## "]],[62,62],[59,59]]],[1596006791039,["Administrator@WIN-T3FPCJLTUH1",[[1,59,"·"]],[59,59],[60,60]]],[1596006791751,["Administrator@WIN-T3FPCJLTUH1",[[-1,59,"·"]],[60,60],[59,59]]],[1596006792439,["Administrator@WIN-T3FPCJLTUH1",[[1,59,"``"]],[59,59],[61,61]]],[1596006796601,["Administrator@WIN-T3FPCJLTUH1",[[1,60,"every()"]],[60,60],[67,67]]],[1596006799664,["Administrator@WIN-T3FPCJLTUH1",[[1,68," 方法"]],[68,68],[71,71]]],[1596006821366,["Administrator@WIN-T3FPCJLTUH1",[[1,71,"测试一个数组内的所有元素是够"]],[71,71],[85,85]]],[1596006822313,["Administrator@WIN-T3FPCJLTUH1",[[-1,82,"素是够"]],[85,85],[82,82]]],[1596006843792,["Administrator@WIN-T3FPCJLTUH1",[[1,82,"素是否都能通过某个指定函数的测试，返回一个布尔值"]],[82,82],[106,106]]],[1596006863591,["Administrator@WIN-T3FPCJLTUH1",[[1,106,"。"]],[106,106],[107,107]]],[1596006864402,["Administrator@WIN-T3FPCJLTUH1",[[1,109,"\n"]],[107,107],[108,108]]],[1596006866613,["Administrator@WIN-T3FPCJLTUH1",[[1,110,"\n"]],[108,108],[109,109]]],[1596006869478,["Administrator@WIN-T3FPCJLTUH1",[[1,109,"```"]],[109,109],[112,112]]],[1596006869505,["Administrator@WIN-T3FPCJLTUH1",[[1,112,"language\n```\n"]],[112,112],[112,120]]],[1596006876515,["Administrator@WIN-T3FPCJLTUH1",[[-1,112,"language"],[1,120,"j"]],[112,120],[113,113]]],[1596006878291,["Administrator@WIN-T3FPCJLTUH1",[[1,113,"avascript"]],[113,113],[122,122]]],[1596006879002,["Administrator@WIN-T3FPCJLTUH1",[[1,123,"\n"]],[122,122],[123,123]]],[1596006881600,["Administrator@WIN-T3FPCJLTUH1",[[1,59,"\n"]],[57,57],[58,58]]],[1596006881727,["Administrator@WIN-T3FPCJLTUH1",[[1,60,"\n"]],[58,58],[59,59]]],[1596006884978,["Administrator@WIN-T3FPCJLTUH1",[[1,59,"## every"]],[59,59],[67,67]]],[1596006894503,["Administrator@WIN-T3FPCJLTUH1",[[1,62,"Array.protoryp"]],[62,62],[76,76]]],[1596006894654,["Administrator@WIN-T3FPCJLTUH1",[[1,77,"e"]],[76,76],[77,77]]],[1596006894854,["Administrator@WIN-T3FPCJLTUH1",[[1,77,"."]],[77,77],[78,78]]],[1596006900664,["Administrator@WIN-T3FPCJLTUH1",[[-1,72,"or"]],[74,74],[72,72]]],[1596006903041,["Administrator@WIN-T3FPCJLTUH1",[[1,72,"tot"]],[72,72],[75,75]]],[1596006904965,["Administrator@WIN-T3FPCJLTUH1",[[-1,72,"t"]],[73,73],[72,72]]],[1596007024644,["Administrator@WIN-T3FPCJLTUH1",[[1,149,"const isBelowThreshold = (currentValue) => currentValue < 40;\n\nconst array1 = [1, 30, 39, 29, 10, 13];\n\nconsole.log(array1.every(isBelowThreshold));\n// expected output: true"]],[149,149],[322,322]]],[1596007081229,["Administrator@WIN-T3FPCJLTUH1",[[1,135,"\n"]],[133,133],[134,134]]],[1596007081519,["Administrator@WIN-T3FPCJLTUH1",[[1,134,"**注意**：若收到一个空数组，此方法在一切情况下都会返回 `true`。"]],[134,134],[171,171]]],[1596007091003,["Administrator@WIN-T3FPCJLTUH1",[[1,367,"\n"]],[364,364],[365,365]]],[1596007091154,["Administrator@WIN-T3FPCJLTUH1",[[1,368,"\n"]],[365,365],[366,366]]],[1596007095668,["Administrator@WIN-T3FPCJLTUH1",[[-1,163," "],[1,164," "],[1,366,"## Arry"]],[366,366],[373,373]]],[1596007096491,["Administrator@WIN-T3FPCJLTUH1",[[-1,372,"y"]],[373,373],[372,372]]],[1596007102493,["Administrator@WIN-T3FPCJLTUH1",[[1,372,"ay.prototype."]],[372,372],[385,385]]],[1596007286807,["Administrator@WIN-T3FPCJLTUH1",[[1,385,"filter"]],[385,385],[391,391]]],[1596007288869,["Administrator@WIN-T3FPCJLTUH1",[[1,394,"\n"]],[391,391],[392,392]]],[1596007290018,["Administrator@WIN-T3FPCJLTUH1",[[1,395,"\n"]],[392,392],[393,393]]],[1596007290632,["Administrator@WIN-T3FPCJLTUH1",[[1,393,"·"]],[393,393],[394,394]]],[1596007291692,["Administrator@WIN-T3FPCJLTUH1",[[-1,393,"·"]],[394,394],[393,393]]],[1596007292507,["Administrator@WIN-T3FPCJLTUH1",[[1,393,"``"]],[393,393],[395,395]]],[1596007295582,["Administrator@WIN-T3FPCJLTUH1",[[1,394,"filter()"]],[394,394],[402,402]]],[1596007318258,["Administrator@WIN-T3FPCJLTUH1",[[1,403," 方法创建一个新数组，其包含通过所提供的"]],[403,403],[423,423]]],[1596007318756,["Administrator@WIN-T3FPCJLTUH1",[[-1,422,"的"]],[423,423],[422,422]]],[1596007328271,["Administrator@WIN-T3FPCJLTUH1",[[1,422,"函数实现的测试的所有元素"]],[422,422],[434,434]]],[1596007347330,["Administrator@WIN-T3FPCJLTUH1",[[1,434,"。"]],[434,434],[435,435]]],[1596007347780,["Administrator@WIN-T3FPCJLTUH1",[[1,438,"\n"]],[435,435],[436,436]]],[1596007348656,["Administrator@WIN-T3FPCJLTUH1",[[1,439,"\n"]],[436,436],[437,437]]],[1596007351794,["Administrator@WIN-T3FPCJLTUH1",[[1,437,"```"]],[437,437],[440,440]]],[1596007351826,["Administrator@WIN-T3FPCJLTUH1",[[1,440,"language\n```\n"]],[440,440],[440,448]]],[1596007352706,["Administrator@WIN-T3FPCJLTUH1",[[-1,440,"language"],[1,448,"j"]],[440,448],[441,441]]],[1596007354407,["Administrator@WIN-T3FPCJLTUH1",[[1,441,"avascript"]],[441,441],[450,450]]],[1596007355805,["Administrator@WIN-T3FPCJLTUH1",[[1,451,"\n"]],[450,450],[451,451]]],[1596007361095,["Administrator@WIN-T3FPCJLTUH1",[[1,451,"const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];\n\nconst result = words.filter(word => word.length > 6);\n\nconsole.log(result);\n// expected output: Array [\"exuberant\", \"destruction\", \"present\"]"]],[451,451],[675,675]]]],null,"Administrator@WIN-T3FPCJLTUH1"]]}